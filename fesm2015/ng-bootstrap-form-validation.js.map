{"version":3,"file":"ng-bootstrap-form-validation.js","sources":["ng://ng-bootstrap-form-validation/lib/Directives/form-validation.directive.ts","ng://ng-bootstrap-form-validation/lib/Enums/BootstrapVersion.ts","ng://ng-bootstrap-form-validation/lib/Tokens/tokens.ts","ng://ng-bootstrap-form-validation/lib/Components/messages/messages.component.ts","ng://ng-bootstrap-form-validation/lib/default-errors.ts","ng://ng-bootstrap-form-validation/lib/Services/error-message.service.ts","ng://ng-bootstrap-form-validation/lib/Components/form-group/form-group.component.ts","ng://ng-bootstrap-form-validation/lib/Directives/form-control.directive.ts","ng://ng-bootstrap-form-validation/lib/ng-bootstrap-form-validation.module.ts"],"sourcesContent":["import {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  HostListener\n} from \"@angular/core\";\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup\n} from \"@angular/forms\";\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: \"[formGroup]\"\n})\nexport class FormValidationDirective {\n  @Input()\n  formGroup: FormGroup;\n  @Output()\n  validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(control: AbstractControl) {\n    if (control instanceof FormGroup) {\n      Object.keys(control.controls).forEach(key =>\n        this.markAsTouchedAndDirty(control.controls[key])\n      );\n    } else if (control instanceof FormArray) {\n      control.controls.forEach(c => this.markAsTouchedAndDirty(c));\n    } else if (control instanceof FormControl && control.enabled) {\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    }\n  }\n}\n","export enum BootstrapVersion {\n  Three,\n  Four\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { BootstrapVersion } from \"../Enums/BootstrapVersion\";\nimport { ErrorMessage } from \"../Models/error-message\";\n\nexport const CUSTOM_ERROR_MESSAGES = new InjectionToken<ErrorMessage[]>(\n  \"ng-bootstrap-form-validation custom error messages\"\n);\n\nexport const BOOTSTRAP_VERSION = new InjectionToken<BootstrapVersion>(\n  \"ng-bootstrap-form-validation module options\"\n);\n","import { Component, Input, Inject } from \"@angular/core\";\nimport { BootstrapVersion } from \"../../../lib/Enums/BootstrapVersion\";\nimport { BOOTSTRAP_VERSION } from \"../../Tokens/tokens\";\n\n@Component({\n  selector: \"bfv-messages\",\n  template: `\n    <span [ngClass]=\"className\" *ngFor=\"let message of messages()\">{{message}}</span>\n  `,\n  styles: [\n    `\n      .invalid-feedback,\n      .valid-feedback {\n        display: block;\n      }\n    `\n  ]\n})\nexport class MessagesComponent {\n  @Input()\n  public messages = () => [];\n\n  get className() {\n    switch (this.bootstrapVersion) {\n      case BootstrapVersion.Three:\n        return \"help-block\";\n      case BootstrapVersion.Four:\n        return \"invalid-feedback\";\n    }\n  }\n\n  constructor(\n    @Inject(BOOTSTRAP_VERSION) private bootstrapVersion: BootstrapVersion\n  ) {}\n}\n","import { ErrorMessage } from \"./Models/error-message\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n","import { Injectable, Inject } from \"@angular/core\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\nimport { ErrorMessage } from \"../Models/error-message\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  public errorMessages: ErrorMessage[];\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES) public customErrorMessages: ErrorMessage[][]\n  ) {\n    this.errorMessages = customErrorMessages.reduce(\n      (acc, cur) => acc.concat(cur),\n      this.defaultErrors\n    );\n  }\n}\n","import {\n  Component,\n  ContentChildren,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  OnInit,\n  AfterContentInit\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\nimport { MessagesComponent } from \"../messages/messages.component\";\nimport { ErrorMessage } from \"../../Models/error-message\";\n\n@Component({\n  // tslint:disable:component-selector\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  `\n})\nexport class FormGroupComponent implements OnInit, AfterContentInit {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input()\n  customErrorMessages: ErrorMessage[] = [];\n\n  @Input()\n  validationDisabled = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @ContentChild(MessagesComponent, { static: false })\n  public messagesBlock: MessagesComponent;\n\n  private errorMessages: ErrorMessage[];\n\n  public messages = () => this.getMessages();\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {}\n\n  ngAfterContentInit() {\n    if (this.messagesBlock) {\n      this.messagesBlock.messages = this.messages;\n    }\n  }\n\n  ngOnInit() {\n    this.errorMessages = this.errorMessageService.errorMessages\n      .concat(this.customErrorMessages)\n      .reverse();\n  }\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  private getMessages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) {\n      return messages;\n    }\n\n    const names = this.FormControlNames.map(f => f.name);\n\n    this.FormControlNames.filter(\n      (c, i) =>\n        !c.valid &&\n        !!c.errors &&\n        // filter out FormControlNames that share the same name - usually for radio buttons\n        names.indexOf(c.name) === i\n    ).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(err => err.error === key);\n        if (!error) {\n          return;\n        }\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n\n    return messages;\n  }\n}\n","import {\n  Directive,\n  Input,\n  HostBinding,\n  Optional,\n  Host,\n  SkipSelf,\n  Inject\n} from \"@angular/core\";\nimport { ControlContainer, FormControl } from \"@angular/forms\";\nimport { BootstrapVersion } from \"../Enums/BootstrapVersion\";\nimport { BOOTSTRAP_VERSION } from \"../Tokens/tokens\";\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  // tslint:disable-next-line:no-non-null-assertion\n  return [...parent.path!, name];\n}\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: \".form-control,.form-check-input,.custom-control-input\"\n})\nexport class FormControlDirective {\n  @Input()\n  formControlName: string;\n  @Input()\n  formControl: string;\n\n  @HostBinding(\"class.is-valid\")\n  get validClass() {\n    if (!this.control) {\n      return false;\n    }\n    return (\n      this.bootstrapFour &&\n      this.control.valid &&\n      (this.control.touched || this.control.dirty)\n    );\n  }\n\n  @HostBinding(\"class.is-invalid\")\n  get invalidClass() {\n    if (!this.control) {\n      return false;\n    }\n    return (\n      this.bootstrapFour &&\n      this.control.invalid &&\n      this.control.touched &&\n      this.control.dirty\n    );\n  }\n\n  get path() {\n    return controlPath(this.formControlName, this.parent);\n  }\n\n  get control(): FormControl {\n    return this.formDirective && this.formDirective.getControl(this);\n  }\n\n  get formDirective(): any {\n    return this.parent ? this.parent.formDirective : null;\n  }\n\n  get bootstrapFour() {\n    return this.bootstrapVersion === BootstrapVersion.Four;\n  }\n\n  constructor(\n    // this value might be null, but we union type it as such until\n    // this issue is resolved: https://github.com/angular/angular/issues/25544\n    @Optional()\n    @Host()\n    @SkipSelf()\n    private parent: ControlContainer,\n    @Inject(BOOTSTRAP_VERSION) private bootstrapVersion: BootstrapVersion\n  ) {}\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { MessagesComponent } from \"./Components/messages/messages.component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { CUSTOM_ERROR_MESSAGES, BOOTSTRAP_VERSION } from \"./Tokens/tokens\";\nimport { BootstrapVersion } from \"./Enums/BootstrapVersion\";\nimport { FormGroupComponent } from \"./Components/form-group/form-group.component\";\nimport { NgBootstrapFormValidationModuleOptions } from \"./Models/NgBootstrapFormValidationModuleOptions\";\nimport { FormControlDirective } from \"./Directives/form-control.directive\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent,\n    FormControlDirective\n  ],\n  exports: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent,\n    FormControlDirective\n  ]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(\n    userOptions: NgBootstrapFormValidationModuleOptions = {\n      bootstrapVersion: BootstrapVersion.Four\n    }\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: userOptions.customErrorMessages || [],\n          multi: true\n        },\n        {\n          provide: BOOTSTRAP_VERSION,\n          useValue: userOptions.bootstrapVersion\n        },\n        ErrorMessageService\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}